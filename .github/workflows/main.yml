name: Nexus Mining

on:
  workflow_dispatch:

jobs:
  mining:
    runs-on: ubuntu-latest
    timeout-minutes: 360  # 6 hours maximum

    steps:
      - name: Initial Setup
        id: setup
        run: |
          # Create timestamp and working directory
          TIMESTAMP=$(date -u '+%Y%m%d_%H%M%S')
          MINING_HOME="$HOME/mining_${TIMESTAMP}"
          
          # Create directory structure
          mkdir -p "$MINING_HOME"/{logs/{system,process,errors,performance},scripts,data}
          
          # Export variables
          {
            echo "TIMESTAMP=$TIMESTAMP"
            echo "MINING_HOME=$MINING_HOME"
          } >> $GITHUB_ENV
          
          # Save initial info
          cat << EOF > "$MINING_HOME/logs/session_info.json"
          {
            "workflow_id": "${{ github.run_id }}",
            "repository": "${{ github.repository }}",
            "user": "${{ github.actor }}",
            "start_time": "$(date -u '+%Y-%m-%d %H:%M:%S')",
            "runner": "${{ runner.os }}-${{ runner.arch }}"
          }
          EOF
          
          echo "Setup completed successfully at $(date -u)"
        shell: bash

      - name: System Optimization
        id: optimize
        run: |
          {
            echo "=== System Optimization Started at $(date -u) ==="
            
            # Stop non-essential services
            echo "Stopping services..."
            for service in snapd unattended-upgrades apache2 mysql docker; do
              sudo systemctl stop $service 2>/dev/null || true
            done
            
            # CPU Optimization
            echo "Configuring CPU..."
            if [ -d "/sys/devices/system/cpu/cpu0/cpufreq" ]; then
              for cpu in /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor; do
                echo "performance" | sudo tee "$cpu" 2>/dev/null || true
              done
            fi
            
            # System tuning
            echo "Tuning system..."
            sudo sysctl -w vm.swappiness=10 2>/dev/null || true
            sudo sysctl -w vm.dirty_ratio=60 2>/dev/null || true
            
            echo "=== System Optimization Completed at $(date -u) ==="
          } 2>&1 | tee "$MINING_HOME/logs/system/optimization.log"
        shell: bash

      - name: Install Dependencies
        id: dependencies
        run: |
          {
            echo "=== Installing Dependencies at $(date -u) ==="
            
            # Update package lists
            for i in {1..3}; do
              if sudo apt-get update; then
                break
              fi
              echo "Retry $i: apt-get update failed"
              sleep 5
            done
            
            # Install required packages
            PACKAGES=(
              expect
              curl
              htop
              sysstat
              numactl
              net-tools
              tree
              jq
            )
            
            for pkg in "${PACKAGES[@]}"; do
              sudo apt-get install -y "$pkg" || echo "Failed to install $pkg"
            done
            
            echo "=== Dependencies Installation Completed at $(date -u) ==="
          } 2>&1 | tee "$MINING_HOME/logs/system/dependencies.log"
        shell: bash

      - name: Setup Monitoring
        id: monitoring
        run: |
          # Create monitoring script
          cat << 'EOFMON' > "$MINING_HOME/scripts/monitor.sh"
          #!/bin/bash
          
          LOG_DIR="$1"
          INTERVAL=60
          
          while true; do
            TIMESTAMP=$(date -u '+%Y-%m-%d_%H:%M:%S')
            
            {
              echo "=== System Metrics at $TIMESTAMP ==="
              echo "--- CPU Usage ---"
              top -bn1 | head -n 20
              echo "--- Memory Usage ---"
              free -h
              echo "--- Disk Usage ---"
              df -h
              echo "--- Process List ---"
              ps aux --sort=-%cpu | head -n 10
            } > "$LOG_DIR/performance/metrics_${TIMESTAMP}.log"
            
            # Node monitoring
            if pgrep -f nexus-network > /dev/null; then
              {
                echo "=== Node Status at $TIMESTAMP ==="
                ps aux | grep nexus-network
              } > "$LOG_DIR/process/node_${TIMESTAMP}.log"
            fi
            
            sleep $INTERVAL
          done
          EOFMON
          
          chmod +x "$MINING_HOME/scripts/monitor.sh"
          echo "Monitoring script created successfully"
        shell: bash

      - name: Run Nexus Mining
        id: mining
        run: |
          {
            echo "=== Starting Mining Operation at $(date -u) ==="
            
            # Start monitoring
            "$MINING_HOME/scripts/monitor.sh" "$MINING_HOME/logs" &
            MONITOR_PID=$!
            
            # Download Nexus CLI
            MAX_RETRIES=5
            for ((i=1; i<=MAX_RETRIES; i++)); do
              echo "Downloading Nexus CLI (attempt $i/$MAX_RETRIES)..."
              if curl -sSL --retry 3 --retry-delay 10 https://cli.nexus.xyz/ | sh; then
                break
              fi
              if [ $i -eq $MAX_RETRIES ]; then
                echo "Failed to download Nexus CLI"
                exit 1
              fi
              sleep 10
            done
            
            # Setup mining function
            start_node() {
              sudo numactl --physcpubind=0-3 --membind=0 expect -c "
                log_user 1
                spawn $HOME/.nexus/bin/nexus-network start --node-id 36659912
                expect {
                  \"Do you agree to the Nexus Beta Terms of Use?\" {
                    send \"Y\r\"
                    exp_continue
                  }
                  timeout {
                    exit 1
                  }
                  eof {
                    exit 0
                  }
                }
              " 2>&1 | tee -a "$MINING_HOME/logs/process/node.log" &
              echo $!
            }
            
            # Start mining
            NODE_PID=$(start_node)
            echo "Node started with PID: $NODE_PID"
            
            # Optimize process
            sudo renice -n -20 -p $NODE_PID || true
            
            # Monitor loop
            RESTART_COUNT=0
            MAX_RESTARTS=5
            END_TIME=$((SECONDS + 21300))  # 5h 55m
            
            while [ $SECONDS -lt $END_TIME ]; do
              if ! ps -p $NODE_PID > /dev/null 2>&1; then
                echo "Node died, attempting restart..."
                RESTART_COUNT=$((RESTART_COUNT + 1))
                
                if [ $RESTART_COUNT -gt $MAX_RESTARTS ]; then
                  echo "Too many restarts, exiting..."
                  break
                fi
                
                NODE_PID=$(start_node)
                echo "Node restarted with PID: $NODE_PID"
                sleep 60
              fi
              
              echo "[$(date -u)] Runtime: ${SECONDS}s, Restarts: $RESTART_COUNT" >> "$MINING_HOME/logs/process/status.log"
              sleep 30
            done
            
            # Cleanup
            kill $MONITOR_PID || true
            pkill -f nexus-network || true
            
            echo "=== Mining Operation Completed at $(date -u) ==="
          } 2>&1 | tee "$MINING_HOME/logs/process/mining.log"
        shell: bash

      - name: Collect Logs
        if: always()
        id: collect_logs
        run: |
          {
            echo "=== Collecting Logs at $(date -u) ==="
            
            # Create summary
            cat << 'ENDSUM' > "$MINING_HOME/logs/summary.md"
            # Mining Operation Summary
            
            ## Session Information
            - Workflow ID: ${{ github.run_id }}
            - Repository: ${{ github.repository }}
            - User: ${{ github.actor }}
            - End Time: $(date -u '+%Y-%m-%d %H:%M:%S')
            
            ## System Configuration
            - Runner: ${{ runner.os }}-${{ runner.arch }}
            ENDSUM
            
            # Create archive
            cd "$HOME"
            ARCHIVE_NAME="mining_logs_${TIMESTAMP}.tar.gz"
            
            if [ -d "$MINING_HOME" ]; then
              tar -czf "$ARCHIVE_NAME" "${MINING_HOME##*/}/"
              echo "Archive created: $ARCHIVE_NAME"
              ls -lh "$ARCHIVE_NAME"
            else
              echo "Creating empty archive..."
              tar -czf "$ARCHIVE_NAME" -T /dev/null
            fi
            
            echo "=== Log Collection Completed at $(date -u) ==="
          } 2>&1 | tee -a "$MINING_HOME/logs/system/collection.log"
        shell: bash

      - name: Upload Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: mining-logs-${{ github.run_id }}
          path: |
            ${{ env.HOME }}/mining_logs_${{ env.TIMESTAMP }}.tar.gz
            ${{ env.MINING_HOME }}/logs/
          retention-days: 7
          compression-level: 9
