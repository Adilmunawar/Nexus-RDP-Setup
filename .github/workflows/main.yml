name: RDP with Nexus Setup

on:
  workflow_dispatch:

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 3600

    steps:
      - name: Configure Core RDP Settings
        run: |
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 0 -Force
          netsh advfirewall firewall add rule name="Allow RDP" dir=in action=allow protocol=TCP localport=3389

      - name: Create RDP User
        run: |
          $password = "pakistan42"
          $securePass = ConvertTo-SecureString $password -AsPlainText -Force
          New-LocalUser -Name "RDP" -Password $securePass -AccountNeverExpires
          Add-LocalGroupMember -Group "Administrators" -Member "RDP"
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member "RDP"
          echo "RDP_PASSWORD=$password" >> $env:GITHUB_ENV

      - name: Install Tailscale
        run: |
          $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi"
          $installerPath = "$env:TEMP\tailscale.msi"
          Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath
          Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait
          Remove-Item $installerPath -Force

      - name: Establish Tailscale Connection
        run: |
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname=gh-runner-$env:GITHUB_RUN_ID
          $tsIP = $null
          $retries = 0
          while (-not $tsIP -and $retries -lt 10) {
            $tsIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4
            Start-Sleep -Seconds 5
            $retries++
          }
          if (-not $tsIP) {
            Write-Error "Tailscale IP not assigned. Exiting."
            exit 1
          }
          echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV

      # --- NEW STEP ADDED HERE ---
      - name: Setup and Run Nexus Network
        run: |
          Write-Host "Installing Windows Subsystem for Linux (WSL)..."
          wsl --install --distribution Ubuntu
          
          Write-Host "Creating WSL user 'Adil' and setting password..."
          # A short delay to ensure the WSL distro is fully initialized after installation
          Start-Sleep -Seconds 20
          
          # Create user 'Adil' and add to sudo group without a password prompt
          wsl.exe --user root useradd -m -G sudo -s /bin/bash Adil
          
          # Set the password non-interactively using chpasswd
          wsl.exe --user root bash -c "echo 'Adil:149120' | chpasswd"
          
          Write-Host "Installing Nexus CLI for user 'Adil'..."
          # The 'yes' command pipes 'y' to the script to automatically accept the terms
          wsl.exe -u Adil -e bash -c "yes | curl https://cli.nexus.xyz/ | sh"
          
          Write-Host "Starting Nexus Network in the background..."
          # Run the final command. The '&' at the end runs it as a background process
          # so it doesn't block the rest of the workflow.
          wsl.exe -u Adil -e bash -c "source /home/Adil/.bashrc && nexus-network start --node-id 36704067 &"
          Write-Host "Nexus Network process has been started."

      - name: Maintain Connection
        run: |
          Write-Host "`n=== RDP ACCESS ==="
          Write-Host "Address: $env:TAILSCALE_IP"
          Write-Host "Username: RDP"
          Write-Host "Password: $env:RDP_PASSWORD"
          Write-Host "==================`n"
          
          # Keep runner active until manually cancelled
          while ($true) {
            Write-Host "[$(Get-Date)] RDP Active. Workflow will continue running."
            Start-Sleep -Seconds 300
          }
