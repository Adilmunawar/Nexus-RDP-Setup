name: Nexus Mining

on:
  workflow_dispatch:

jobs:
  mining:
    runs-on: ubuntu-latest
    timeout-minutes: 360  # Fixed 6 hours maximum

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Environment and System Optimization
        run: |
          # Create organized log directory structure with timestamp
          TIMESTAMP=$(date -u '+%Y%m%d_%H%M%S')
          WORKFLOW_ID="${{ github.run_id }}"
          WORKFLOW_NAME="${{ github.workflow }}"
          LOG_BASE="$HOME/mining_logs"
          LOG_DIR="$LOG_BASE/${TIMESTAMP}_${WORKFLOW_ID}"
          
          # Create directory structure
          mkdir -p "$LOG_DIR"/{system,node,metrics,performance,config}
          
          # Save runtime configuration
          cat << EOF > "$LOG_DIR/config/runtime_info.json"
          {
            "workflow_id": "$WORKFLOW_ID",
            "workflow_name": "$WORKFLOW_NAME",
            "start_time": "$(date -u '+%Y-%m-%d %H:%M:%S')",
            "github_actor": "${{ github.actor }}",
            "duration_hours": "6",
            "runner_os": "$(uname -a)",
            "runner_version": "${{ runner.os }}-${{ runner.arch }}"
          }
          EOF
          
          # System Optimization
          {
            echo "=== System Optimization Start: $(date -u '+%Y-%m-%d %H:%M:%S UTC') ==="
            
            # CPU Configuration
            echo "Setting CPU governor to performance mode..."
            for cpu in /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor; do
              echo "performance" | sudo tee $cpu
            done
            
            # Disable CPU throttling
            echo "Configuring CPU throttling..."
            echo "1" | sudo tee /sys/devices/system/cpu/intel_pstate/no_turbo || true
            
            # System tuning
            echo "Configuring system parameters..."
            sudo sysctl -w kernel.sched_min_granularity_ns=10000000
            sudo sysctl -w kernel.sched_wakeup_granularity_ns=15000000
            sudo sysctl -w vm.swappiness=10
            sudo sysctl -w vm.dirty_ratio=60
            sudo sysctl -w vm.dirty_background_ratio=30
            
            # Stop unnecessary services
            echo "Stopping unnecessary services..."
            for service in snapd unattended-upgrades apache2 mysql docker; do
              sudo systemctl stop $service 2>/dev/null || true
            done
            
            echo "=== System Optimization Complete: $(date -u '+%Y-%m-%d %H:%M:%S UTC') ==="
          } 2>&1 | tee "$LOG_DIR/system/optimization.log"
          
          # Export variables for other steps
          echo "LOG_DIR=$LOG_DIR" >> $GITHUB_ENV
          echo "TIMESTAMP=$TIMESTAMP" >> $GITHUB_ENV
        shell: bash

      - name: Install Dependencies
        run: |
          {
            echo "=== Installing Dependencies: $(date -u '+%Y-%m-%d %H:%M:%S UTC') ==="
            
            # Update package list
            sudo apt-get update
            
            # Install required packages
            sudo apt-get install -y \
              expect \
              curl \
              htop \
              sysstat \
              linux-tools-common \
              linux-tools-generic \
              numactl \
              cpufrequtils \
              iotop \
              net-tools \
              tree
            
            echo "=== Dependencies Installation Complete: $(date -u '+%Y-%m-%d %H:%M:%S UTC') ==="
          } 2>&1 | tee "$LOG_DIR/system/dependencies.log"

      - name: Setup Monitoring Scripts
        run: |
          # Create monitoring script
          cat << 'EOF' > "$LOG_DIR/scripts/monitor.sh"
          #!/bin/bash
          
          LOG_DIR="$1"
          
          while true; do
            TIMESTAMP=$(date -u '+%Y-%m-%d_%H:%M:%S')
            
            # System metrics
            {
              echo "=== System Metrics at $TIMESTAMP ==="
              echo "--- CPU Usage ---"
              mpstat 1 1
              echo "--- Memory Usage ---"
              free -h
              echo "--- Disk I/O ---"
              iostat -x 1 1
              echo "--- Network Stats ---"
              netstat -s
              echo "--- Process List ---"
              ps aux --sort=-%cpu | head -n 15
            } >> "$LOG_DIR/performance/system_metrics_${TIMESTAMP}.log"
            
            # Node specific metrics
            if pgrep -f nexus-network > /dev/null; then
              {
                echo "=== Node Metrics at $TIMESTAMP ==="
                echo "--- Node Process Info ---"
                ps -p $(pgrep -f nexus-network) -o pid,ppid,cmd,%cpu,%mem,start,etime
                echo "--- Node File Descriptors ---"
                ls -l /proc/$(pgrep -f nexus-network)/fd
              } >> "$LOG_DIR/node/process_metrics_${TIMESTAMP}.log"
            fi
            
            sleep 60
          done
          EOF
          
          chmod +x "$LOG_DIR/scripts/monitor.sh"

      - name: Run Nexus Mining CLI
        run: |
          # Start monitoring
          "$LOG_DIR/scripts/monitor.sh" "$LOG_DIR" &
          MONITOR_PID=$!
          
          # Download and setup Nexus CLI
          {
            echo "=== Starting Nexus CLI Setup: $(date -u '+%Y-%m-%d %H:%M:%S UTC') ==="
            curl -sSL --retry 5 --retry-delay 10 https://cli.nexus.xyz/ | sh
            
            NEXUS_HOME="$HOME/.nexus"
            BIN_DIR="$NEXUS_HOME/bin"
            
            # Function to start node with optimizations
            start_node() {
              echo "Starting node with optimizations..."
              sudo numactl --physcpubind=0-3 --membind=0 expect -c "
                log_user 1
                spawn $BIN_DIR/nexus-network start --node-id 36659912
                expect {
                  \"Do you agree to the Nexus Beta Terms of Use?\" {
                    send \"Y\r\"
                    exp_continue
                  }
                  timeout {
                    exit 1
                  }
                  eof {
                    exit 0
                  }
                }
              " 2>&1 | tee -a "$LOG_DIR/node/node.log" &
              
              echo $!
            }
            
            # Start node
            NODE_PID=$(start_node)
            echo "Node started with PID: $NODE_PID"
            
            # Optimize node process
            sudo renice -n -20 -p $NODE_PID
            sudo chrt -f -p 99 $NODE_PID
            
            # Monitor node for 6 hours
            END_TIME=$((SECONDS + 21600)) # 6 hours in seconds
            RESTART_COUNT=0
            MAX_RESTARTS=5
            
            while [ $SECONDS -lt $END_TIME ]; do
              if ! ps -p $NODE_PID > /dev/null 2>&1; then
                echo "Node process died, attempting restart..."
                RESTART_COUNT=$((RESTART_COUNT + 1))
                
                if [ $RESTART_COUNT -gt $MAX_RESTARTS ]; then
                  echo "Too many restart attempts, exiting..."
                  break
                fi
                
                NODE_PID=$(start_node)
                echo "Node restarted with PID: $NODE_PID"
                sleep 60
              fi
              
              sleep 30
            done
            
          } 2>&1 | tee "$LOG_DIR/node/operation.log"
          
          # Stop monitoring
          kill $MONITOR_PID || true

      - name: Collect and Package Logs
        if: always()
        run: |
          {
            echo "=== Collecting Final System State: $(date -u '+%Y-%m-%d %H:%M:%S UTC') ==="
            
            # System summary
            {
              echo "--- Final CPU State ---"
              lscpu
              echo "--- Final Memory State ---"
              free -h
              echo "--- Final Disk State ---"
              df -h
              echo "--- Final Process Tree ---"
              pstree -p
              echo "--- System Uptime ---"
              uptime
            } > "$LOG_DIR/system/final_state.log"
            
            # Create summary report
            cat << EOF > "$LOG_DIR/summary.md"
            # Mining Operation Summary
            
            ## Runtime Information
            - **Workflow ID**: ${{ github.run_id }}
            - **Start Time**: $(cat "$LOG_DIR/config/runtime_info.json" | jq -r .start_time)
            - **End Time**: $(date -u '+%Y-%m-%d %H:%M:%S')
            - **Duration**: 6 hours
            - **Actor**: ${{ github.actor }}
            
            ## System Configuration
            - Runner: ${{ runner.os }}-${{ runner.arch }}
            - CPU Optimization: Enabled
            - Process Priority: -20 (highest)
            
            ## Log Structure
            \`\`\`
            $(tree "$LOG_DIR")
            \`\`\`
            
            EOF
            
            # Compress logs
            cd $HOME
            tar -czf "mining_logs_$TIMESTAMP.tar.gz" mining_logs/
            
            echo "=== Log Collection Complete: $(date -u '+%Y-%m-%d %H:%M:%S UTC') ==="
          } 2>&1 | tee "$LOG_DIR/system/final_collection.log"

      - name: Upload Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: mining-logs-${{ github.run_id }}-${{ env.TIMESTAMP }}
          path: ~/mining_logs_${{ env.TIMESTAMP }}.tar.gz
          retention-days: 7
          compression-level: 9
